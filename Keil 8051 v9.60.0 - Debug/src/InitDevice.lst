C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe W:\3_DESENVOLVIM
                    -ENTO\Projetos em andamento (PB)\Elinton- PB0183 - Smart Switch Mini WiFi\Software\Smart_Switch_Mini\src\InitDevice.c OMF
                    -2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) 
                    -INTPROMOTE INCDIR(W:\3_DESENVOLVIMENTO\Projetos em andamento (PB)\Elinton- PB0183 - Smart Switch Mini WiFi\Software\Smar
                    -t_Switch_Mini\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/shared/si8051Base;C:/SiliconLabs
                    -/SimplicityStudio/v5/developer/sdks/8051/v4.2.3//Device/EFM8BB1/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAG
                    -ELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8BB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        WDT_0_enter_DefaultMode_from_RESET ();
  27   1        PORTS_0_enter_DefaultMode_from_RESET ();
  28   1        PORTS_1_enter_DefaultMode_from_RESET ();
  29   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  30   1        ADC_0_enter_DefaultMode_from_RESET ();
  31   1        VREF_0_enter_DefaultMode_from_RESET ();
  32   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  33   1        TIMER16_2_enter_DefaultMode_from_RESET ();
  34   1        INTERRUPT_0_enter_DefaultMode_from_RESET ();
  35   1        // [Config Calls]$
  36   1      
  37   1      }
  38          
  39          extern void
  40          WDT_0_enter_DefaultMode_from_RESET (void)
  41          {
  42   1        // $[Watchdog Timer Init Variable Declarations]
  43   1        uint32_t i;
  44   1        bool ea;
  45   1        // [Watchdog Timer Init Variable Declarations]$
  46   1      
  47   1        // $[WDTCN - Watchdog Timer Control]
  48   1        // Deprecated
  49   1        // [WDTCN - Watchdog Timer Control]$
  50   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 2   

  51   1        // $[WDTCN_2 - Watchdog Timer Control]
  52   1      
  53   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  54   1        WDTCN = 0xA5;
  55   1      
  56   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  57   1        for (i = 0; i < (2 * 3062500UL) / (10000 * 3); i++)
  58   1          {
  59   2            NOP ();
  60   2          }
  61   1      
  62   1        // Disable WDT
  63   1        ea = IE_EA;
  64   1        IE_EA = 0;
  65   1        WDTCN = 0xDE;
  66   1        WDTCN = 0xAD;
  67   1        IE_EA = ea;
  68   1      
  69   1        // [WDTCN_2 - Watchdog Timer Control]$
  70   1      
  71   1      }
  72          
  73          extern void
  74          PORTS_0_enter_DefaultMode_from_RESET (void)
  75          {
  76   1        // $[P0 - Port 0 Pin Latch]
  77   1        // [P0 - Port 0 Pin Latch]$
  78   1      
  79   1        // $[P0MDOUT - Port 0 Output Mode]
  80   1        /***********************************************************************
  81   1         - P0.0 output is open-drain
  82   1         - P0.1 output is open-drain
  83   1         - P0.2 output is open-drain
  84   1         - P0.3 output is open-drain
  85   1         - P0.4 output is push-pull
  86   1         - P0.5 output is open-drain
  87   1         - P0.6 output is open-drain
  88   1         - P0.7 output is push-pull
  89   1         ***********************************************************************/
  90   1        P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__OPEN_DRAIN
  91   1            | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN | P0MDOUT_B4__PUSH_PULL
  92   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__PUSH_PULL;
  93   1        // [P0MDOUT - Port 0 Output Mode]$
  94   1      
  95   1        // $[P0MDIN - Port 0 Input Mode]
  96   1        // [P0MDIN - Port 0 Input Mode]$
  97   1      
  98   1        // $[P0SKIP - Port 0 Skip]
  99   1        /***********************************************************************
 100   1         - P0.0 pin is skipped by the crossbar
 101   1         - P0.1 pin is not skipped by the crossbar
 102   1         - P0.2 pin is skipped by the crossbar
 103   1         - P0.3 pin is skipped by the crossbar
 104   1         - P0.4 pin is skipped by the crossbar
 105   1         - P0.5 pin is skipped by the crossbar
 106   1         - P0.6 pin is not skipped by the crossbar
 107   1         - P0.7 pin is not skipped by the crossbar
 108   1         ***********************************************************************/
 109   1        P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__NOT_SKIPPED | P0SKIP_B2__SKIPPED
 110   1            | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 111   1            | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 112   1        // [P0SKIP - Port 0 Skip]$
 113   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 3   

 114   1        // $[P0MASK - Port 0 Mask]
 115   1        // [P0MASK - Port 0 Mask]$
 116   1      
 117   1        // $[P0MAT - Port 0 Match]
 118   1        // [P0MAT - Port 0 Match]$
 119   1      
 120   1      }
 121          
 122          extern void
 123          PORTS_1_enter_DefaultMode_from_RESET (void)
 124          {
 125   1        // $[P1 - Port 1 Pin Latch]
 126   1        // [P1 - Port 1 Pin Latch]$
 127   1      
 128   1        // $[P1MDOUT - Port 1 Output Mode]
 129   1        /***********************************************************************
 130   1         - P1.0 output is open-drain
 131   1         - P1.1 output is push-pull
 132   1         - P1.2 output is open-drain
 133   1         - P1.3 output is open-drain
 134   1         - P1.4 output is open-drain
 135   1         - P1.5 output is open-drain
 136   1         - P1.6 output is open-drain
 137   1         ***********************************************************************/
 138   1        P1MDOUT = P1MDOUT_B0__OPEN_DRAIN | P1MDOUT_B1__PUSH_PULL
 139   1            | P1MDOUT_B2__OPEN_DRAIN | P1MDOUT_B3__OPEN_DRAIN | P1MDOUT_B4__OPEN_DRAIN
 140   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN;
 141   1        // [P1MDOUT - Port 1 Output Mode]$
 142   1      
 143   1        // $[P1MDIN - Port 1 Input Mode]
 144   1        // [P1MDIN - Port 1 Input Mode]$
 145   1      
 146   1        // $[P1SKIP - Port 1 Skip]
 147   1        // [P1SKIP - Port 1 Skip]$
 148   1      
 149   1        // $[P1MASK - Port 1 Mask]
 150   1        // [P1MASK - Port 1 Mask]$
 151   1      
 152   1        // $[P1MAT - Port 1 Match]
 153   1        // [P1MAT - Port 1 Match]$
 154   1      
 155   1      }
 156          
 157          extern void
 158          PBCFG_0_enter_DefaultMode_from_RESET (void)
 159          {
 160   1        // $[XBR2 - Port I/O Crossbar 2]
 161   1        /***********************************************************************
 162   1         - Weak Pullups disabled
 163   1         - Crossbar enabled
 164   1         ***********************************************************************/
 165   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_DISABLED | XBR2_XBARE__ENABLED;
 166   1        // [XBR2 - Port I/O Crossbar 2]$
 167   1      
 168   1        // $[PRTDRV - Port Drive Strength]
 169   1        // [PRTDRV - Port Drive Strength]$
 170   1      
 171   1        // $[XBR0 - Port I/O Crossbar 0]
 172   1        // [XBR0 - Port I/O Crossbar 0]$
 173   1      
 174   1        // $[XBR1 - Port I/O Crossbar 1]
 175   1        // [XBR1 - Port I/O Crossbar 1]$
 176   1      
C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 4   

 177   1      }
 178          
 179          extern void
 180          ADC_0_enter_DefaultMode_from_RESET (void)
 181          {
 182   1        // $[ADC0CN1 - ADC0 Control 1]
 183   1        // [ADC0CN1 - ADC0 Control 1]$
 184   1      
 185   1        // $[ADC0MX - ADC0 Multiplexer Selection]
 186   1        // [ADC0MX - ADC0 Multiplexer Selection]$
 187   1      
 188   1        // $[ADC0CF - ADC0 Configuration]
 189   1        /***********************************************************************
 190   1         - SAR Clock Divider = 0x05
 191   1         - ADC0 operates in 10-bit or 12-bit mode 
 192   1         - The on-chip PGA gain is 1
 193   1         - Delayed Track Mode
 194   1         ***********************************************************************/
 195   1        ADC0CF = (0x05 << ADC0CF_ADSC__SHIFT) | ADC0CF_AD8BE__NORMAL
 196   1            | ADC0CF_ADGN__GAIN_1 | ADC0CF_ADTM__TRACK_DELAYED;
 197   1        // [ADC0CF - ADC0 Configuration]$
 198   1      
 199   1        // $[ADC0AC - ADC0 Accumulator Configuration]
 200   1        // [ADC0AC - ADC0 Accumulator Configuration]$
 201   1      
 202   1        // $[ADC0TK - ADC0 Burst Mode Track Time]
 203   1        /***********************************************************************
 204   1         - The ADC will re-track and sample the input four times during a 12-bit
 205   1         conversion
 206   1         - Burst Mode Tracking Time = 0x34
 207   1         ***********************************************************************/
 208   1        ADC0TK = ADC0TK_AD12SM__SAMPLE_FOUR | (0x34 << ADC0TK_ADTK__SHIFT);
 209   1        // [ADC0TK - ADC0 Burst Mode Track Time]$
 210   1      
 211   1        // $[ADC0PWR - ADC0 Power Control]
 212   1        /***********************************************************************
 213   1         - Burst Mode Power Up Time = 0x04
 214   1         - Disable low power mode
 215   1         - Low power mode enabled 
 216   1         - Select bias current mode 1 
 217   1         ***********************************************************************/
 218   1        ADC0PWR = (0x04 << ADC0PWR_ADPWR__SHIFT) | ADC0PWR_ADLPM__LP_BUFFER_DISABLED
 219   1            | ADC0PWR_ADMXLP__LP_MUX_VREF_ENABLED | ADC0PWR_ADBIAS__MODE1;
 220   1        // [ADC0PWR - ADC0 Power Control]$
 221   1      
 222   1        // $[ADC0GTH - ADC0 Greater-Than High Byte]
 223   1        // [ADC0GTH - ADC0 Greater-Than High Byte]$
 224   1      
 225   1        // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 226   1        // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 227   1      
 228   1        // $[ADC0LTH - ADC0 Less-Than High Byte]
 229   1        // [ADC0LTH - ADC0 Less-Than High Byte]$
 230   1      
 231   1        // $[ADC0LTL - ADC0 Less-Than Low Byte]
 232   1        // [ADC0LTL - ADC0 Less-Than Low Byte]$
 233   1      
 234   1        // $[ADC0CN0 - ADC0 Control 0]
 235   1        /***********************************************************************
 236   1         - Enable ADC0 burst mode
 237   1         ***********************************************************************/
 238   1        ADC0CN0 |= ADC0CN0_ADBMEN__BURST_ENABLED;
 239   1        // [ADC0CN0 - ADC0 Control 0]$
C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 5   

 240   1      
 241   1      }
 242          
 243          extern void
 244          VREF_0_enter_DefaultMode_from_RESET (void)
 245          {
 246   1        // $[REF0CN - Voltage Reference Control]
 247   1        /***********************************************************************
 248   1         - Disable the Temperature Sensor
 249   1         - The ADC0 ground reference is the GND pin
 250   1         - The internal reference operates at 1.65 V nominal
 251   1         - The ADC0 voltage reference is the VDD pin
 252   1         ***********************************************************************/
 253   1        REF0CN = REF0CN_TEMPE__TEMP_DISABLED | REF0CN_GNDSL__GND_PIN
 254   1            | REF0CN_IREFLVL__1P65 | REF0CN_REFSL__VDD_PIN;
 255   1        // [REF0CN - Voltage Reference Control]$
 256   1      
 257   1      }
 258          
 259          extern void
 260          CLOCK_0_enter_DefaultMode_from_RESET (void)
 261          {
 262   1        // $[CLKSEL - Clock Select]
 263   1        // [CLKSEL - Clock Select]$
 264   1      
 265   1      }
 266          
 267          extern void
 268          TIMER16_2_enter_DefaultMode_from_RESET (void)
 269          {
 270   1        // $[Timer Initialization]
 271   1        // Save Timer Configuration
 272   1        uint8_t TMR2CN0_TR2_save;
 273   1        TMR2CN0_TR2_save = TMR2CN0 & TMR2CN0_TR2__BMASK;
 274   1        // Stop Timer
 275   1        TMR2CN0 &= ~(TMR2CN0_TR2__BMASK);
 276   1        // [Timer Initialization]$
 277   1      
 278   1        // $[TMR2CN0 - Timer 2 Control]
 279   1        /***********************************************************************
 280   1         - Enable low byte interrupts
 281   1         - Timer 2 operates as two 8-bit auto-reload timers
 282   1         ***********************************************************************/
 283   1        TMR2CN0 |= TMR2CN0_TF2LEN__ENABLED | TMR2CN0_T2SPLIT__8_BIT_RELOAD;
 284   1        // [TMR2CN0 - Timer 2 Control]$
 285   1      
 286   1        // $[TMR2H - Timer 2 High Byte]
 287   1        // [TMR2H - Timer 2 High Byte]$
 288   1      
 289   1        // $[TMR2L - Timer 2 Low Byte]
 290   1        // [TMR2L - Timer 2 Low Byte]$
 291   1      
 292   1        // $[TMR2RLH - Timer 2 Reload High Byte]
 293   1        // [TMR2RLH - Timer 2 Reload High Byte]$
 294   1      
 295   1        // $[TMR2RLL - Timer 2 Reload Low Byte]
 296   1        /***********************************************************************
 297   1         - Timer 2 Reload Low Byte = 0x7F
 298   1         ***********************************************************************/
 299   1        TMR2RLL = (0x7F << TMR2RLL_TMR2RLL__SHIFT);
 300   1        // [TMR2RLL - Timer 2 Reload Low Byte]$
 301   1      
 302   1        // $[TMR2CN0]
C51 COMPILER V9.60.0.0   INITDEVICE                                                        07/28/2022 15:25:14 PAGE 6   

 303   1        // [TMR2CN0]$
 304   1      
 305   1        // $[Timer Restoration]
 306   1        // Restore Timer Configuration
 307   1        TMR2CN0 |= TMR2CN0_TR2_save;
 308   1        // [Timer Restoration]$
 309   1      
 310   1      }
 311          
 312          extern void
 313          INTERRUPT_0_enter_DefaultMode_from_RESET (void)
 314          {
 315   1        // $[EIE1 - Extended Interrupt Enable 1]
 316   1        // [EIE1 - Extended Interrupt Enable 1]$
 317   1      
 318   1        // $[EIP1 - Extended Interrupt Priority 1]
 319   1        // [EIP1 - Extended Interrupt Priority 1]$
 320   1      
 321   1        // $[IE - Interrupt Enable]
 322   1        /***********************************************************************
 323   1         - Enable each interrupt according to its individual mask setting
 324   1         - Disable external interrupt 0
 325   1         - Disable external interrupt 1
 326   1         - Disable all SPI0 interrupts
 327   1         - Disable all Timer 0 interrupt
 328   1         - Disable all Timer 1 interrupt
 329   1         - Enable interrupt requests generated by the TF2L or TF2H flags
 330   1         - Disable UART0 interrupt
 331   1         ***********************************************************************/
 332   1        IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED | IE_ESPI0__DISABLED
 333   1            | IE_ET0__DISABLED | IE_ET1__DISABLED | IE_ET2__ENABLED
 334   1            | IE_ES0__DISABLED;
 335   1        // [IE - Interrupt Enable]$
 336   1      
 337   1        // $[IP - Interrupt Priority]
 338   1        // [IP - Interrupt Priority]$
 339   1      
 340   1      }
 341          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    153    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
